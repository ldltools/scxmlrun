# -*-Makefile-*-

all::

# truffle (v4.1.14)
T_BUILD_DIR	?= ./_build
T_CONTRACTS	?= $(shell echo contracts/*.sol)
T_CONTRACTS_js	= $(T_CONTRACTS:%.sol=$(T_BUILD_DIR)/build/%.json)
T_TESTS		?= $(shell echo scenarios/*.js)

# ganache (ganache-cli v6.1.8)
G_HOST		?= "127.0.0.1"
#G_HOST		?= localhost
G_PORT		?= 8545
G_NETWORK	?= 5777
G_GAS_LIMIT	?= 8000000
G_PID_FILE	?= $(T_BUILD_DIR)/.ganache_pid

build::	truffle-compile truffle-deploy

veryclean::	clean
	rm -rf $(T_BUILD_DIR)

version::
	@echo "[truffle/ganache]"
	@truffle version
	@ganache-cli --version

# --------------------------------------------------------------------------------
# ganache

usage::
	@echo "usage: make ganache-[start | stop | restart]"

# start a new ganache process
ganache-start:	fail-if-ganache-is-running
	(ganache-cli -h $(G_HOST) -p $(G_PORT) --networkId $(G_NETWORK) --gasLimit $(G_GAS_LIMIT) &);\
	while test $$(pgrep -a node | grep ganache-cli | wc -l) -eq 0; do sleep 1; done

ganache-stop:	fail-if-ganache-is-not-running
	kill -9 $$(cat $(G_PID_FILE)); rm -f $(G_PID_FILE)

ganache-restart:	ganache-stop ganache-start

# ganache is running?
fail-if-ganache-is-running:
	@pgrep -a node | grep ganache-cli | gawk '{print($$1)}' > $(G_PID_FILE)
	@test -s $(G_PID_FILE) -a -d "/proc/$$(cat $(G_PID_FILE))" &&\
	{ echo -e "\n** ganache is running. try \"make ganache-stop\"\n" > /dev/stderr; exit 1; } || exit 0

fail-if-ganache-is-not-running:
	@pgrep -a node | grep ganache-cli | gawk '{print($$1)}' > $(G_PID_FILE)
	@test -s $(G_PID_FILE) -a -d "/proc/$$(cat $(G_PID_FILE))" ||\
	{ echo -e "\n** ganache is not running. try \"make ganache-start\"\n" > /dev/stderr; exit 1; }

clean::
	rm -f $(G_PID_FILE)

# --------------------------------------------------------------------------------
# truffle

usage::
	@echo "usage: make truffle-[init | compile | deploy | test]"

# --------------------
# truffle init
# --------------------
truffle-init::
	test -d $(T_BUILD_DIR)/contracts ||\
	{ mkdir -p $(T_BUILD_DIR); cd $(T_BUILD_DIR);\
	  truffle init;\
	  rm -f ./truffle.js; }
	test -f $(T_BUILD_DIR)/package.json || echo '{}' > $(T_BUILD_DIR)/package.json

# --------------------
# truffle compile
# --------------------
truffle-compile::	truffle-init $(T_CONTRACTS_js)

$(T_CONTRACTS_js):	$(T_BUILD_DIR)/.compiled
$(T_BUILD_DIR)/.compiled:	$(T_CONTRACTS:%=$(T_BUILD_DIR)/%)
#	rm -f $(T_BUILD_DIR)/build/contracts/*
	(cd $(T_BUILD_DIR); truffle compile)
	touch $@

$(T_CONTRACTS:%=$(T_BUILD_DIR)/%):	$(T_CONTRACTS)
	rsync $(T_CONTRACTS) $(T_BUILD_DIR)/contracts

clean::
	rm -f $(T_BUILD_DIR)/.compiled
	rm -f $(T_BUILD_DIR)/build/contracts/*.json

# --------------------
# truffle deploy
# --------------------
truffle-deploy::	truffle-compile $(T_BUILD_DIR)/migrations/2_deploy_contracts.js $(T_BUILD_DIR)/truffle.js fail-if-ganache-is-not-running
	(cd $(T_BUILD_DIR); truffle deploy)

# setup: "_build/truffle.js"
$(T_BUILD_DIR)/truffle.js:
	rm -f $@; touch $@
	echo "module.exports = {"	>> $@
	echo " networks: {"		>> $@
	echo "  development: {"		>> $@
	echo "   host: \"$(G_HOST)\", port: $(G_PORT), network_id: \"*\"" >> $@
	echo "}}};"			>> $@

# set up: "_build/migrations/2_deploy_contracts.js"
ifeq ($(shell test -f migrations/2_deploy_contracts.js && echo 1 || echo 0), 1)
$(T_BUILD_DIR)/migrations/2_deploy_contracts.js:	migrations/2_deploy_contracts.js
	mkdir -p $(T_BUILD_DIR)/migrations
	cp -f $< $@
else
$(T_BUILD_DIR)/migrations/2_deploy_contracts.js:
	mkdir -p $(T_BUILD_DIR)/migrations
	rm -f $@; touch $@
	for f in $(T_CONTRACTS); do \
	  echo "var $$(basename $$f .sol) = artifacts.require (\"./$$(basename $$f)\");" >> $@;\
	done
	echo "module.exports = function (deployer) {" >> $@
	for f in $(T_CONTRACTS); do \
	  echo "deployer.deploy($$(basename $$f .sol));" >> $@;\
	done
	echo "}" >> $@
endif

# --------------------
# truffle test
# --------------------
truffle-test::	fail-if-ganache-is-not-running
	rsync $(T_TESTS) $(T_BUILD_DIR)/test
	(cd $(T_BUILD_DIR); truffle test)
