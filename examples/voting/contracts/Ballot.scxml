<?xml version="1.0"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0" datamodel="ecmascript" initial="q2">
  <datamodel>
    <data id="proposals" expr="[]"/>
    <data id="nproposal" expr="0"/>
    <data id="voters" expr="{}"/>
    <data id="nvoter" expr="0"/>
    <data id="nvoted" expr="0"/>
    <data id="chairperson" expr=""/>
    <!-- _trace for each 'run' is a sequence of 'possible worlds' generated/tracked at run-time -->
    <data id="_trace"/>
    <!-- _trace_matches (guard) examines whether _trace âŠ¨ [true*]guard holds or not -->
    <data id="_trace_matches" expr="function (guard) { return true; }"/>
    <!-- _trace_append (next_world) appends next_world to _trace -->
    <data id="_trace_append" expr="function (next_world) { }"/>
  </datamodel>
  <state id="q2">
    <transition target="q4" event="Propose">
      <!--tid t54-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   nproposal = _event.data.nproposal;
  var i; for (i = 0; i &lt; nproposal; i++) proposals[i] = {voteCount:0};
  chairperson = _event.origin;
  voters[chairperson] = {weight : 1, voted : false, delegate : "0", vote : 0};
  nvoter = 0;
  console.log ("chair=", chairperson, "nproposal=", nproposal); ;</script>
      <!--rule: r33 event: Propose certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
    </transition>
  </state>
  <state id="q5">
    <transition target="q6" event="Vote">
      <!--tid t56-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   var voter_addr = _event.origin;
  if (voters[voter_addr] == undefined || voters[voter_addr].voted)
    SCXML.raise ({name : "error.execution"});
  console.assert (!voters[voter_addr].voted);
  var proposal = _event.data.proposal;
  voters[voter_addr].voted = true;
  voters[voter_addr].vote = proposal;
  proposals[proposal].voteCount += voters[voter_addr].weight;
  nvoted += voters[voter_addr].weight;
  SCXML.raise ({name : "_success"});
  console.log ("Vote: ", _event.origin, _event.data.proposal, "nvoted=", nvoted, "/", nvoter);
  if (nvoted == nvoter) {
    var i;
    for (i = 0; i &lt; nproposal; i++) console.log ("proposals[", i, "]=", proposals[i].voteCount);
  } ;</script>
      <!--rule: r35 event: Vote certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
      <!--rule.raise: _success-->
    </transition>
    <transition target="q5" event="GiveRightToVote">
      <!--tid t57-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   if (_event.origin != chairperson)
    SCXML.raise ({name : "error.execution"});
  var voter_addr = _event.data.voter; // string
  voters[voter_addr] = {weight : 1, voted : false, delegate : "0", vote : 0};
  nvoter++; ;</script>
      <!--rule: r34 event: GiveRightToVote certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
    </transition>
    <transition target="q6" event="Delegate">
      <!--tid t58-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   var sender_addr = _event.origin;
  if (voters[sender_addr] == undefined || voters[sender_addr].voted)
    SCXML.raise ({name : "error.execution"});
  var voter_addr = _event.data.voter;
  if (voters[voter_addr] == undefined || voter_addr == sender_addr)
    SCXML.raise ({name : "error.execution"});
  console.assert (voter_addr != sender_addr);
  while (voters[voter_addr].delegate != "0")
  {
    voter_addr = voters[voter_addr].delegate;
    if (voter_addr == sender_addr) SCXML.raise ({name : "error.execution"});
  }
  voters[sender_addr].voted = true;
  voters[sender_addr].delegate = voter_addr;
  if (voters[voter_addr].voted)
  {
    proposals[voters[voter_addr].vote].voteCount += voters[sender_addr].weight;
    nvoted += voters[sender_addr].weight;
  }
  else
  {
    voters[voter_addr].weight += voters[sender_addr].weight;
  }
  SCXML.raise ({name : "_success"});
  console.log ("Delegate: ", _event.origin, _event.data.voter, voters[sender_addr].weight, "nvoted=", nvoted, "/", nvoter);
  if (nvoted == nvoter) {
    var i;
    for (i = 0; i &lt; nproposal; i++) console.log ("proposals[", i, "]=", proposals[i].voteCount);
  } ;</script>
      <!--rule: r36 event: Delegate certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
      <!--rule.raise: _success-->
    </transition>
  </state>
  <state id="q7">
    <transition target="q8" event="_accept">
      <!--tid t61-->
    </transition>
    <transition target="q6" event="Vote">
      <!--tid t62-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   var voter_addr = _event.origin;
  if (voters[voter_addr] == undefined || voters[voter_addr].voted)
    SCXML.raise ({name : "error.execution"});
  console.assert (!voters[voter_addr].voted);
  var proposal = _event.data.proposal;
  voters[voter_addr].voted = true;
  voters[voter_addr].vote = proposal;
  proposals[proposal].voteCount += voters[voter_addr].weight;
  nvoted += voters[voter_addr].weight;
  SCXML.raise ({name : "_success"});
  console.log ("Vote: ", _event.origin, _event.data.proposal, "nvoted=", nvoted, "/", nvoter);
  if (nvoted == nvoter) {
    var i;
    for (i = 0; i &lt; nproposal; i++) console.log ("proposals[", i, "]=", proposals[i].voteCount);
  } ;</script>
      <!--rule: r35 event: Vote certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
      <!--rule.raise: _success-->
    </transition>
    <transition target="q5" event="GiveRightToVote">
      <!--tid t63-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   if (_event.origin != chairperson)
    SCXML.raise ({name : "error.execution"});
  var voter_addr = _event.data.voter; // string
  voters[voter_addr] = {weight : 1, voted : false, delegate : "0", vote : 0};
  nvoter++; ;</script>
      <!--rule: r34 event: GiveRightToVote certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
    </transition>
    <transition target="q6" event="Delegate">
      <!--tid t64-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   var sender_addr = _event.origin;
  if (voters[sender_addr] == undefined || voters[sender_addr].voted)
    SCXML.raise ({name : "error.execution"});
  var voter_addr = _event.data.voter;
  if (voters[voter_addr] == undefined || voter_addr == sender_addr)
    SCXML.raise ({name : "error.execution"});
  console.assert (voter_addr != sender_addr);
  while (voters[voter_addr].delegate != "0")
  {
    voter_addr = voters[voter_addr].delegate;
    if (voter_addr == sender_addr) SCXML.raise ({name : "error.execution"});
  }
  voters[sender_addr].voted = true;
  voters[sender_addr].delegate = voter_addr;
  if (voters[voter_addr].voted)
  {
    proposals[voters[voter_addr].vote].voteCount += voters[sender_addr].weight;
    nvoted += voters[sender_addr].weight;
  }
  else
  {
    voters[voter_addr].weight += voters[sender_addr].weight;
  }
  SCXML.raise ({name : "_success"});
  console.log ("Delegate: ", _event.origin, _event.data.voter, voters[sender_addr].weight, "nvoted=", nvoted, "/", nvoter);
  if (nvoted == nvoter) {
    var i;
    for (i = 0; i &lt; nproposal; i++) console.log ("proposals[", i, "]=", proposals[i].voteCount);
  } ;</script>
      <!--rule: r36 event: Delegate certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
      <!--rule.raise: _success-->
    </transition>
  </state>
  <final id="q8"/>
  <state id="q6">
    <transition target="q7" event="_success">
      <!--tid t77-->
    </transition>
  </state>
  <state id="q4">
    <transition target="q5" event="GiveRightToVote">
      <!--tid t81-->
      <!--transition: curr_world: true label: true next_world: true-->
      <script>_trace_append (" true ");   if (_event.origin != chairperson)
    SCXML.raise ({name : "error.execution"});
  var voter_addr = _event.data.voter; // string
  voters[voter_addr] = {weight : 1, voted : false, delegate : "0", vote : 0};
  nvoter++; ;</script>
      <!--rule: r34 event: GiveRightToVote certainty: 15-->
      <!--rule.when: true-->
      <!--rule.ensure: true-->
    </transition>
  </state>
</scxml>
